## SPDX-FileCopyrightText: 2021 Comcast Cable Communications Management, LLC
## SPDX-License-Identifier: Apache-2.0
---
prometheus:
  defaultNamespace: xmidt
  defaultSubsystem: authbaton
  constLabels:
    development: "true"
  handler:
    maxRequestsInFlight: 5
    timeout: 5s
    instrumentMetricHandler: true

# configures go.uber.org/zap
logging:
  level: debug
  development: true
  encoderConfig:
    messageKey: msg
    levelKey: level

health:
  disableLogging: false
  custom:
    server: development

servers:
  primary:
    address: localhost:6800
    disableHTTPKeepAlives: true
    header:
      X-Midt-Server:
        - authbaton
      X-Midt-Version:
        - development

  metrics:
    address: localhost:6801
    disableHTTPKeepAlives: true
    header:
      X-Midt-Server:
        - authbaton
      X-Midt-Version:
        - development

  health:
    address: localhost:6802
    disableHTTPKeepAlives: true
    header:
      X-Midt-Server:
        - authbaton
      X-Midt-Version:
        - development

##############################################################################
# Authorization Credentials
##############################################################################
authx:
  inbound:
    # basic is a list of Basic Auth credentials intended to be used for local testing purposes.
    # WARNING! Be sure to remove this from your production config.
    basic: ["dXNlcjpwYXNz"]

    # bearer contains all the configuration needed for a JWT validator.
    bearer:
      key:
        factory:
          uri: "http://localhost:6500/keys/development"
        purpose: 0
        updateInterval: 24h
    # capabilities provides the details needed for checking an incoming JWT's
    # capabilities.  If the type of check isn't provided, no checking is done.  The
    # type can be "monitor" or "enforce". If "monitor" is provided, the capabilities
    # are checked but the request isn't rejected when there isn't a valid capability
    # for the request. Instead, a message is logged.  When "enforce" is provided, a
    # request that doesn't have the needed capability is rejected.

    # The capability is expected to have the format:

    # {prefix}{endpoint}:{method}

    # The prefix can be a regular expression.  If it's empty, no capability check
    # is done.  The endpoint is a regular expression that should match the endpoint
    # the request was sent to. The method is usually the method of the request, such as
    # GET.  The accept all method is a catchall string that indicates the capability
    # is approved for all methods.
    # (Optional)
    capabilities:
      # type provides the mode for capability checking.
      type: "enforce"
      # prefix provides the regex to match the capability before the endpoint.
      prefix: "x1:issuer:test:"
      # acceptAllMethod provides a way to have a capability that allows all
      # methods for a specific endpoint.
      acceptAllMethod: "all"
      # endpointBuckets provides regular expressions to use against the request
      # endpoint in order to group requests for a metric label.
      endpointBuckets:
        # - "auth\\b"

# onErrorHTTPResponse provides the option to decide which authentication type
# is requested through the 'WWW-Authenticate' HTTP response header. Note that
# this header is returned along a 401 when an Authorization header was not included
# in an inbound HTTP request.
# (Optional). authType defaults to 'Bearer'. Supported values are "Basic" and "Bearer".
onErrorHTTPResponse:
  authType: "Basic"

# parseURL provides options around the parsing of incoming request URLs by bascule.
parseURL:
  # urlParsePrefix helps bascule ignore a certain prefix from an incoming request
  # URL path (i.e. removing "/api/v1/" from "/api/v1/relevantEndpoint") for
  # cross-checking endpoints and capabilities.
  # (Optional)
  urlPathPrefix: "/"
